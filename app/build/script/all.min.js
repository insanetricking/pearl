class SideBar {
  constructor() {
    this.content = document.querySelector('.header__content');
    this.layout = document.querySelector('.header__content-layout');
    this.sideBarBtn = document.querySelector('.header__content-icon');
    this.sideBar = document.querySelector('.sideBar');
    this.sideBarElems = [...this.sideBar.children];
    this.content.addEventListener('click', e => {
      this.hideOrShow(e.target);
    });
  }

  hideOrShow(element) {
    if (element == this.sideBarBtn) {
      this.layout.classList.add('disabled');
      this.sideBar.classList.add('active');
    } else if (element == this.content && this.sideBar.classList.contains('active')) {
      this.layout.classList.remove('disabled');
      this.sideBar.classList.remove('active');
    }
  }

}

const sideBar = new SideBar(); // Second Try//

class Slider {
  constructor(obj) {
    this.pagination = [...document.querySelectorAll(obj.pagination)];
    this.init(obj);
    window.addEventListener('resize', () => {
      location.reload();
      this.init(obj);
    });
  }

  init(obj) {
    for (let i = 0; i < this.pagination.length; i++) {
      let slider = this.pagination[i].closest(obj.slider);
      let paginationBar = slider.querySelector(obj.pagination);
      let buttons = [...paginationBar.children];
      let slideItem = slider.querySelector(obj.item);
      let slideImages = [...slider.querySelectorAll(obj.slideImg)];
      let width = slider.offsetWidth;
      let height = slider.clientHeight;
      slider.style.height = width * 76 / 100 + 'px';
      slideImages.forEach(item => {
        item.style.width = width + 'px';
        item.style.height = 'auto';
      });
      paginationBar.addEventListener('click', e => {
        this.change(e, paginationBar, buttons, width, height, slideItem);
      });
    }
  }

  change(e, paginationBar, buttons, width, height, slideItem) {
    buttons.forEach((button, i) => {
      if (e.target != paginationBar) {
        button.classList.remove('active');

        if (button == e.target) {
          button.classList.add('active');

          if (i == 0) {
            slideItem.style = `
                            transition:0.6s;
                            transform:translateX(0px)
                            `;
          } else {
            slideItem.style = `
                            transition:0.6s;
                            transform:translateX(-${i * width}px)
                            `;
          }
        }
      }
    });
  }

}

const slider = new Slider({
  sliderWrapper: '.slider__wrapper',
  slider: '.slider',
  item: '.slider__items',
  buttons: '.slider__round',
  slideImg: '.slider__img',
  pagination: '.slider__pagination'
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNpZGViYXIuanMiLCJzbGlkZXIuanMiXSwibmFtZXMiOlsiU2lkZUJhciIsImNvbnN0cnVjdG9yIiwiY29udGVudCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImxheW91dCIsInNpZGVCYXJCdG4iLCJzaWRlQmFyIiwic2lkZUJhckVsZW1zIiwiY2hpbGRyZW4iLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsImhpZGVPclNob3ciLCJ0YXJnZXQiLCJlbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiY29udGFpbnMiLCJyZW1vdmUiLCJTbGlkZXIiLCJvYmoiLCJwYWdpbmF0aW9uIiwicXVlcnlTZWxlY3RvckFsbCIsImluaXQiLCJ3aW5kb3ciLCJsb2NhdGlvbiIsInJlbG9hZCIsImkiLCJsZW5ndGgiLCJzbGlkZXIiLCJjbG9zZXN0IiwicGFnaW5hdGlvbkJhciIsImJ1dHRvbnMiLCJzbGlkZUl0ZW0iLCJpdGVtIiwic2xpZGVJbWFnZXMiLCJzbGlkZUltZyIsIndpZHRoIiwib2Zmc2V0V2lkdGgiLCJoZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJzdHlsZSIsImZvckVhY2giLCJjaGFuZ2UiLCJidXR0b24iLCJzbGlkZXJXcmFwcGVyIl0sIm1hcHBpbmdzIjoiQUFBQSxNQUFBQSxPQUFBLENBQUE7QUFFQUMsRUFBQUEsV0FBQSxHQUFBO0FBQ0EsU0FBQUMsT0FBQSxHQUFBQyxRQUFBLENBQUFDLGFBQUEsQ0FBQSxrQkFBQSxDQUFBO0FBQ0EsU0FBQUMsTUFBQSxHQUFBRixRQUFBLENBQUFDLGFBQUEsQ0FBQSx5QkFBQSxDQUFBO0FBQ0EsU0FBQUUsVUFBQSxHQUFBSCxRQUFBLENBQUFDLGFBQUEsQ0FBQSx1QkFBQSxDQUFBO0FBQ0EsU0FBQUcsT0FBQSxHQUFBSixRQUFBLENBQUFDLGFBQUEsQ0FBQSxVQUFBLENBQUE7QUFDQSxTQUFBSSxZQUFBLEdBQUEsQ0FBQSxHQUFBLEtBQUFELE9BQUEsQ0FBQUUsUUFBQSxDQUFBO0FBSUEsU0FBQVAsT0FBQSxDQUFBUSxnQkFBQSxDQUFBLE9BQUEsRUFBQUMsQ0FBQSxJQUFBO0FBQ0EsV0FBQUMsVUFBQSxDQUFBRCxDQUFBLENBQUFFLE1BQUE7QUFDQSxLQUZBO0FBTUE7O0FBR0FELEVBQUFBLFVBQUEsQ0FBQUUsT0FBQSxFQUFBO0FBRUEsUUFBQUEsT0FBQSxJQUFBLEtBQUFSLFVBQUEsRUFBQTtBQUNBLFdBQUFELE1BQUEsQ0FBQVUsU0FBQSxDQUFBQyxHQUFBLENBQUEsVUFBQTtBQUNBLFdBQUFULE9BQUEsQ0FBQVEsU0FBQSxDQUFBQyxHQUFBLENBQUEsUUFBQTtBQUNBLEtBSEEsTUFHQSxJQUFBRixPQUFBLElBQUEsS0FBQVosT0FBQSxJQUFBLEtBQUFLLE9BQUEsQ0FBQVEsU0FBQSxDQUFBRSxRQUFBLENBQUEsUUFBQSxDQUFBLEVBQUE7QUFFQSxXQUFBWixNQUFBLENBQUFVLFNBQUEsQ0FBQUcsTUFBQSxDQUFBLFVBQUE7QUFDQSxXQUFBWCxPQUFBLENBQUFRLFNBQUEsQ0FBQUcsTUFBQSxDQUFBLFFBQUE7QUFFQTtBQUNBOztBQS9CQTs7QUFzQ0EsTUFBQVgsT0FBQSxHQUFBLElBQUFQLE9BQUEsRUFBQSxDLENDckNBOztBQUVBLE1BQUFtQixNQUFBLENBQUE7QUFDQWxCLEVBQUFBLFdBQUEsQ0FBQW1CLEdBQUEsRUFBQTtBQUVBLFNBQUFDLFVBQUEsR0FBQSxDQUFBLEdBQUFsQixRQUFBLENBQUFtQixnQkFBQSxDQUFBRixHQUFBLENBQUFDLFVBQUEsQ0FBQSxDQUFBO0FBR0EsU0FBQUUsSUFBQSxDQUFBSCxHQUFBO0FBRUFJLElBQUFBLE1BQUEsQ0FBQWQsZ0JBQUEsQ0FBQSxRQUFBLEVBQUEsTUFBQTtBQUNBZSxNQUFBQSxRQUFBLENBQUFDLE1BQUE7QUFDQSxXQUFBSCxJQUFBLENBQUFILEdBQUE7QUFFQSxLQUpBO0FBUUE7O0FBRUFHLEVBQUFBLElBQUEsQ0FBQUgsR0FBQSxFQUFBO0FBR0EsU0FBQSxJQUFBTyxDQUFBLEdBQUEsQ0FBQSxFQUFBQSxDQUFBLEdBQUEsS0FBQU4sVUFBQSxDQUFBTyxNQUFBLEVBQUFELENBQUEsRUFBQSxFQUFBO0FBR0EsVUFBQUUsTUFBQSxHQUFBLEtBQUFSLFVBQUEsQ0FBQU0sQ0FBQSxFQUFBRyxPQUFBLENBQUFWLEdBQUEsQ0FBQVMsTUFBQSxDQUFBO0FBQ0EsVUFBQUUsYUFBQSxHQUFBRixNQUFBLENBQUF6QixhQUFBLENBQUFnQixHQUFBLENBQUFDLFVBQUEsQ0FBQTtBQUNBLFVBQUFXLE9BQUEsR0FBQSxDQUFBLEdBQUFELGFBQUEsQ0FBQXRCLFFBQUEsQ0FBQTtBQUNBLFVBQUF3QixTQUFBLEdBQUFKLE1BQUEsQ0FBQXpCLGFBQUEsQ0FBQWdCLEdBQUEsQ0FBQWMsSUFBQSxDQUFBO0FBQ0EsVUFBQUMsV0FBQSxHQUFBLENBQUEsR0FBQU4sTUFBQSxDQUFBUCxnQkFBQSxDQUFBRixHQUFBLENBQUFnQixRQUFBLENBQUEsQ0FBQTtBQUNBLFVBQUFDLEtBQUEsR0FBQVIsTUFBQSxDQUFBUyxXQUFBO0FBQ0EsVUFBQUMsTUFBQSxHQUFBVixNQUFBLENBQUFXLFlBQUE7QUFFQVgsTUFBQUEsTUFBQSxDQUFBWSxLQUFBLENBQUFGLE1BQUEsR0FBQUYsS0FBQSxHQUFBLEVBQUEsR0FBQSxHQUFBLEdBQUEsSUFBQTtBQUdBRixNQUFBQSxXQUFBLENBQUFPLE9BQUEsQ0FBQVIsSUFBQSxJQUFBO0FBQ0FBLFFBQUFBLElBQUEsQ0FBQU8sS0FBQSxDQUFBSixLQUFBLEdBQUFBLEtBQUEsR0FBQSxJQUFBO0FBQ0FILFFBQUFBLElBQUEsQ0FBQU8sS0FBQSxDQUFBRixNQUFBLEdBQUEsTUFBQTtBQUdBLE9BTEE7QUFRQVIsTUFBQUEsYUFBQSxDQUFBckIsZ0JBQUEsQ0FBQSxPQUFBLEVBQUFDLENBQUEsSUFBQTtBQUNBLGFBQUFnQyxNQUFBLENBQUFoQyxDQUFBLEVBQUFvQixhQUFBLEVBQUFDLE9BQUEsRUFBQUssS0FBQSxFQUFBRSxNQUFBLEVBQUFOLFNBQUE7QUFDQSxPQUZBO0FBR0E7QUFHQTs7QUFFQVUsRUFBQUEsTUFBQSxDQUFBaEMsQ0FBQSxFQUFBb0IsYUFBQSxFQUFBQyxPQUFBLEVBQUFLLEtBQUEsRUFBQUUsTUFBQSxFQUFBTixTQUFBLEVBQUE7QUFHQUQsSUFBQUEsT0FBQSxDQUFBVSxPQUFBLENBQUEsQ0FBQUUsTUFBQSxFQUFBakIsQ0FBQSxLQUFBO0FBQ0EsVUFBQWhCLENBQUEsQ0FBQUUsTUFBQSxJQUFBa0IsYUFBQSxFQUFBO0FBQ0FhLFFBQUFBLE1BQUEsQ0FBQTdCLFNBQUEsQ0FBQUcsTUFBQSxDQUFBLFFBQUE7O0FBQ0EsWUFBQTBCLE1BQUEsSUFBQWpDLENBQUEsQ0FBQUUsTUFBQSxFQUFBO0FBQ0ErQixVQUFBQSxNQUFBLENBQUE3QixTQUFBLENBQUFDLEdBQUEsQ0FBQSxRQUFBOztBQUVBLGNBQUFXLENBQUEsSUFBQSxDQUFBLEVBQUE7QUFDQU0sWUFBQUEsU0FBQSxDQUFBUSxLQUFBLEdBQUE7QUFDQTtBQUNBO0FBQ0EsNkJBSEE7QUFJQSxXQUxBLE1BS0E7QUFDQVIsWUFBQUEsU0FBQSxDQUFBUSxLQUFBLEdBQUE7QUFDQTtBQUNBLG9EQUFBZCxDQUFBLEdBQUFVLEtBQUE7QUFDQSw2QkFIQTtBQUlBO0FBRUE7QUFDQTtBQUVBLEtBckJBO0FBMEJBOztBQWhGQTs7QUF3RkEsTUFBQVIsTUFBQSxHQUFBLElBQUFWLE1BQUEsQ0FBQTtBQUNBMEIsRUFBQUEsYUFBQSxFQUFBLGtCQURBO0FBRUFoQixFQUFBQSxNQUFBLEVBQUEsU0FGQTtBQUdBSyxFQUFBQSxJQUFBLEVBQUEsZ0JBSEE7QUFJQUYsRUFBQUEsT0FBQSxFQUFBLGdCQUpBO0FBS0FJLEVBQUFBLFFBQUEsRUFBQSxjQUxBO0FBTUFmLEVBQUFBLFVBQUEsRUFBQTtBQU5BLENBQUEsQ0FBQSIsImZpbGUiOiJhbGwubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgU2lkZUJhcntcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgICAgIHRoaXMuY29udGVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXJfX2NvbnRlbnQnKTtcclxuICAgICAgICB0aGlzLmxheW91dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5oZWFkZXJfX2NvbnRlbnQtbGF5b3V0Jyk7XHJcbiAgICAgICAgdGhpcy5zaWRlQmFyQnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmhlYWRlcl9fY29udGVudC1pY29uJyk7XHJcbiAgICAgICAgdGhpcy5zaWRlQmFyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNpZGVCYXInKTtcclxuICAgICAgICB0aGlzLnNpZGVCYXJFbGVtcyA9IFsuLi50aGlzLnNpZGVCYXIuY2hpbGRyZW5dO1xyXG4gICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuY29udGVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuaGlkZU9yU2hvdyhlLnRhcmdldCk7XHJcbiAgICAgICAgfSlcclxuICAgICAgICBcclxuICAgICAgICBcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgIFxyXG4gICAgaGlkZU9yU2hvdyhlbGVtZW50KXtcclxuXHJcbiAgICAgICAgaWYoZWxlbWVudCA9PSB0aGlzLnNpZGVCYXJCdG4pe1xyXG4gICAgICAgICAgICB0aGlzLmxheW91dC5jbGFzc0xpc3QuYWRkKCdkaXNhYmxlZCcpO1xyXG4gICAgICAgICAgICB0aGlzLnNpZGVCYXIuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XHJcbiAgICAgICAgfSBlbHNlIGlmKGVsZW1lbnQgPT0gdGhpcy5jb250ZW50ICYmIHRoaXMuc2lkZUJhci5jbGFzc0xpc3QuY29udGFpbnMoJ2FjdGl2ZScpKXtcclxuXHJcbiAgICAgICAgICAgIHRoaXMubGF5b3V0LmNsYXNzTGlzdC5yZW1vdmUoJ2Rpc2FibGVkJyk7XHJcbiAgICAgICAgICAgIHRoaXMuc2lkZUJhci5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfVxyXG59XHJcblxyXG4gICAgXHJcblxyXG4gICAgXHJcbn1cclxuXHJcbmNvbnN0IHNpZGVCYXIgPSBuZXcgU2lkZUJhcigpO1xyXG5cclxuIiwiXHJcbi8vIFNlY29uZCBUcnkvL1xyXG5cclxuY2xhc3MgU2xpZGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKG9iaikge1xyXG5cclxuICAgICAgICB0aGlzLnBhZ2luYXRpb24gPSBbLi4uZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChvYmoucGFnaW5hdGlvbildO1xyXG5cclxuXHJcbiAgICAgICAgdGhpcy5pbml0KG9iailcclxuXHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHtcclxuICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdChvYmopO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGluaXQob2JqKSB7XHJcblxyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucGFnaW5hdGlvbi5sZW5ndGg7IGkrKykge1xyXG5cclxuXHJcbiAgICAgICAgICAgIGxldCBzbGlkZXIgPSB0aGlzLnBhZ2luYXRpb25baV0uY2xvc2VzdChvYmouc2xpZGVyKTtcclxuICAgICAgICAgICAgbGV0IHBhZ2luYXRpb25CYXIgPSBzbGlkZXIucXVlcnlTZWxlY3RvcihvYmoucGFnaW5hdGlvbik7XHJcbiAgICAgICAgICAgIGxldCBidXR0b25zID0gWy4uLnBhZ2luYXRpb25CYXIuY2hpbGRyZW5dO1xyXG4gICAgICAgICAgICBsZXQgc2xpZGVJdGVtID0gc2xpZGVyLnF1ZXJ5U2VsZWN0b3Iob2JqLml0ZW0pO1xyXG4gICAgICAgICAgICBsZXQgc2xpZGVJbWFnZXMgPSBbLi4uc2xpZGVyLnF1ZXJ5U2VsZWN0b3JBbGwob2JqLnNsaWRlSW1nKV07XHJcbiAgICAgICAgICAgIGxldCB3aWR0aCA9IHNsaWRlci5vZmZzZXRXaWR0aDtcclxuICAgICAgICAgICAgbGV0IGhlaWdodCA9IHNsaWRlci5jbGllbnRIZWlnaHQ7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBzbGlkZXIuc3R5bGUuaGVpZ2h0ID0gd2lkdGgqNzYgLzEwMCArICdweCc7XHJcblxyXG5cclxuICAgICAgICAgICAgc2xpZGVJbWFnZXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgICAgIGl0ZW0uc3R5bGUud2lkdGggPSB3aWR0aCArICdweCc7XHJcbiAgICAgICAgICAgICAgICBpdGVtLnN0eWxlLmhlaWdodCA9ICdhdXRvJztcclxuXHJcblxyXG4gICAgICAgICAgICB9KVxyXG5cclxuXHJcbiAgICAgICAgICAgIHBhZ2luYXRpb25CYXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2UoZSwgcGFnaW5hdGlvbkJhciwgYnV0dG9ucywgd2lkdGgsIGhlaWdodCwgc2xpZGVJdGVtKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH1cclxuXHJcbiAgICBjaGFuZ2UoZSwgcGFnaW5hdGlvbkJhciwgYnV0dG9ucywgd2lkdGgsIGhlaWdodCwgc2xpZGVJdGVtKSB7XHJcblxyXG5cclxuICAgICAgICBidXR0b25zLmZvckVhY2goKGJ1dHRvbiwgaSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZS50YXJnZXQgIT0gcGFnaW5hdGlvbkJhcikge1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJ1dHRvbiA9PSBlLnRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzbGlkZUl0ZW0uc3R5bGUgPSBgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0aW9uOjAuNnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm06dHJhbnNsYXRlWCgwcHgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlSXRlbS5zdHlsZSA9IGBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXRpb246MC42cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTp0cmFuc2xhdGVYKC0ke2kgKiB3aWR0aH1weClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KVxyXG5cclxuXHJcblxyXG5cclxuICAgIH1cclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5jb25zdCBzbGlkZXIgPSBuZXcgU2xpZGVyKHtcclxuICAgIHNsaWRlcldyYXBwZXI6ICcuc2xpZGVyX193cmFwcGVyJyxcclxuICAgIHNsaWRlcjogJy5zbGlkZXInLFxyXG4gICAgaXRlbTogJy5zbGlkZXJfX2l0ZW1zJyxcclxuICAgIGJ1dHRvbnM6ICcuc2xpZGVyX19yb3VuZCcsXHJcbiAgICBzbGlkZUltZzogJy5zbGlkZXJfX2ltZycsXHJcbiAgICBwYWdpbmF0aW9uOiAnLnNsaWRlcl9fcGFnaW5hdGlvbidcclxufSk7Il19
